package de.NDN.app.writeInvoice;

import javafx.scene.web.WebEngine;
import javafx.scene.web.WebView;

public class WriteInvoiceModel {
	
	private WriteInvoiceStage wInvS;
	private WriteInvoiceJsInterface wInvJsI;
	private WriteInvoiceController wInvC;
	private WriteInvoiceView wInvV;
	private WebView browser;
	private WebEngine engine;
	
	private final int PAGE_WIDTH = 595;
	private final int PAGE_HEIGHT = 842;	
	private final int VIEW_PAGE_ZOOM_INTERVAL = 30;	
	private final int VIEW_PAGE_ZOOM_MIN = 10;
	private final int VIEW_PAGE_ZOOM_MAX = 500;
	
	private int viewPageZoom = 100;
	private boolean viewPageFitWidth = false;
	
	public WriteInvoiceModel() {		
		
	}
	
	public void initWriteInvoice() {
		this.wInvS = new WriteInvoiceStage(this);
		this.browser = this.wInvS.getBrowser();
		this.engine = this.wInvS.getEngine();
		
		this.wInvJsI = new WriteInvoiceJsInterfaceImpl(this.engine);
      	this.wInvC = new WriteInvoiceController(this.browser, this.engine);
      	this.wInvV = new WriteInvoiceView(this.browser, this.engine);
      	
      	wInvS.show();
	}
	
	public void setDefaults() {
		setViewPageZoom(this.viewPageZoom);
		this.engine.executeScript("setPageSize(" + this.PAGE_WIDTH + ", " + this.PAGE_HEIGHT + ");");
	}
	
	public void zoomInViewPage() {
		int newViewPageZoom = this.viewPageZoom + this.VIEW_PAGE_ZOOM_INTERVAL;
		
		double oldPageWidth = this.PAGE_WIDTH * (this.viewPageZoom / 100.0);
		double newPageWidth = this.PAGE_WIDTH * (newViewPageZoom / 100.0);
		int width = this.wInvJsI.getViewPageWrapperWidth();
		int height = this.wInvJsI.getViewPageWrapperHeight();
		
		if(width + 50 > oldPageWidth && width + 50 < newPageWidth && !this.viewPageFitWidth) {
			double zoom = ( (width - 40.0) / this.PAGE_WIDTH ) * 100 ;
			newViewPageZoom = (int) zoom;
			this.viewPageFitWidth = true;
		} else {
			this.viewPageFitWidth = false;
			if((newViewPageZoom - 100) % this.VIEW_PAGE_ZOOM_INTERVAL != 0) {
				double zoom = ((double) newViewPageZoom - 100) / this.VIEW_PAGE_ZOOM_INTERVAL;
				newViewPageZoom = ((int) Math.round(zoom)) * this.VIEW_PAGE_ZOOM_INTERVAL + 100;
			}
		}
		if(newViewPageZoom <= VIEW_PAGE_ZOOM_MAX) {
			setViewPageZoom(newViewPageZoom);
		}
	}
	public void zoomOutViewPage() {
		int newViewPageZoom = this.viewPageZoom - this.VIEW_PAGE_ZOOM_INTERVAL;
		if(newViewPageZoom >= VIEW_PAGE_ZOOM_MIN) {
			setViewPageZoom(newViewPageZoom);
		}
	}
	
	
	public int getViewPageZoom() {
		return viewPageZoom;
	}

	public void setViewPageZoom(int viewPageZoom) {
		this.viewPageZoom = viewPageZoom;
		//this.wInvV.changeViewPageZoom(viewPageZoom);
		this.engine.executeScript("changeViewPageZoom(" + viewPageZoom + ");");
	}
	

}
