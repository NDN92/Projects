package de.NDN.test2.GUI;

import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Toolkit;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.EventHandler;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.Pane;
import javafx.scene.Parent;
import javafx.scene.control.TextField;

class MultilineText2 extends TextField {
	private Parent pnt;

	public MultilineText2(Parent pnt, String text) {
		super(text);
		this.pnt = pnt;
		
		setFont(new javafx.scene.text.Font("Arial", 15));
		Font font = new Font("Arial", Font.PLAIN, 15);
		FontMetrics fm = Toolkit.getDefaultToolkit().getFontMetrics(font);		
		
		int stringWidth = fm.stringWidth(text) + 40;
		int stringHeight = 40;
		
		setPrefWidth( stringWidth );
		setMaxHeight( stringHeight );
		
		addEventHandler(KeyEvent.KEY_TYPED, new EventHandler<KeyEvent>() {
		    @Override
		    public void handle(KeyEvent event) {
		    	Parent parent = getPnt();
		        String key = event.getCharacter();
		        
		        if(key.equals("\r")) {
		        	MultilineText prevLine = ((MultilineText) ((Pane) parent).getChildren().get(1));
		        	prevLine.setPressed(false);
		        	
		        	MultilineText nextLine = new MultilineText(parent, "");
		        	nextLine.setLayoutY(prevLine.getLayoutY() + 20);
		        	((Pane) parent).getChildren().add(nextLine);		        	
		        	nextLine.requestFocus();
		        }
		        if(key.equals("\b")) {
		        	String textContent = getText();
		        	if(textContent.equals("")) {		        		
		        		((Pane) parent).getChildren().remove(2);
		        		MultilineText prevLine = ((MultilineText) ((Pane) parent).getChildren().get(1));
		        		prevLine.requestFocus();
		        		prevLine.positionCaret( prevLine.getLength() );
		        	}
		        }
		    }});
		
	}
	
	public Parent getPnt() {
		return pnt;
	}

}