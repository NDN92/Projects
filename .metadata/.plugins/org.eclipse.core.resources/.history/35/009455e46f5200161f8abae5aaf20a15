package de.NDN.app.writeInvoice.document;

import java.awt.Image;
import java.awt.Shape;
import java.awt.geom.Rectangle2D;
import java.awt.print.Printable;
import java.util.ArrayList;

import javax.swing.ImageIcon;

import de.NDN.app.globalObjects.CustomerType;
import de.NDN.app.writeInvoice.WriteInvoiceModel;
import de.NDN.app.writeInvoice.document.print.DocumentInvoicePrintable;
import de.NDN.app.writeInvoice.document.print.DocumentInvoicePrinter;
import javafx.scene.web.WebEngine;

public class DocumentInvoiceFactory {
	
	private DocumentInvoice doc;
	private WebEngine engine;
	private ArrayList<Printable> printableDocuments;
	private DocumentInvoicePrinter documentInvoicePrinter;
	private WriteInvoiceModel writeInvoiceModel;
	
	public DocumentInvoiceFactory(WebEngine engine, WriteInvoiceModel writeInvoiceModel) {
		this.engine = engine;
		this.writeInvoiceModel = writeInvoiceModel;
	}
	
	public void createNewDocument(CustomerType customerType) {
		this.doc = new DocumentInvoice(customerType, new ArrayList<PageInvoice>());
		this.doc.getPages().add( new PageInvoice(this.doc, 1) );
	}
	
	public void showDocumentOnViewPage() {
		if(this.doc != null) {
			double printableAreaWidth = this.writeInvoiceModel.getPAGE_WIDTH() - (this.doc.getPages().get(0).getPrintableArea()[1] + this.doc.getPages().get(0).getPrintableArea()[3]);
			double printableAreaHeight = this.writeInvoiceModel.getPAGE_HEIGHT() - (this.doc.getPages().get(0).getPrintableArea()[0] + this.doc.getPages().get(0).getPrintableArea()[2]);
			double[] pageSize = {this.writeInvoiceModel.getPAGE_WIDTH(), this.writeInvoiceModel.getPAGE_HEIGHT()};
			
			printableDocuments = new ArrayList<Printable>();
			DocumentInvoicePrintable currentPrintableDocument = new DocumentInvoicePrintable();			
			ArrayList<Shape> currentPrintableDocumentContent = new ArrayList<Shape>();
			this.documentInvoicePrinter = new DocumentInvoicePrinter();
			
			if(this.doc.getCustomerType() == CustomerType.PRIVATE) {
				
				this.engine.executeScript("setPrintableArea(" +
						this.doc.getPages().get(0).getPrintableArea()[0] + ", " +
						this.doc.getPages().get(0).getPrintableArea()[1] + ", " +
						this.doc.getPages().get(0).getPrintableArea()[2] + ", " +
						this.doc.getPages().get(0).getPrintableArea()[3] + ");");
				this.documentInvoicePrinter.setPageSize(pageSize);
				this.documentInvoicePrinter.setPrintableArea(this.doc.getPages().get(0).getPrintableArea());
				this.documentInvoicePrinter.setPrintableAreaWidth(printableAreaWidth);
				this.documentInvoicePrinter.setPrintableAreaHeight(printableAreaHeight);
				
				
				//Company Header
				String companyLogoUrl = this.doc.getPages().get(0).getCompanyHeader().getCompanyLogoURL();
				companyLogoUrl = "../images" + companyLogoUrl.substring(companyLogoUrl.lastIndexOf("/"), companyLogoUrl.length());
				int logoHeight = this.doc.getPages().get(0).getCompanyHeader().getCompanyHeaderHeight() - 10;
				int logoX = 0;
				int logoY = 0;
				int hrHeight = 1;
				double hrWidth = printableAreaWidth;
				int hrX = 0;
				int hrY = this.doc.getPages().get(0).getCompanyHeader().getCompanyHeaderHeight() - hrHeight;
				this.engine.executeScript("setCompanyHeader(" + 
						logoHeight + ", '" +
						companyLogoUrl + "'," + 
						logoX + ", " +
						logoY + ", " +
						hrHeight + ", " +
						hrWidth + ", " +
						hrX + ", " +
						hrY + ");");
				
				Rectangle2D.Double hr = new Rectangle2D.Double();
				hr.setRect(hrX, hrY, hrWidth, hrHeight);
				currentPrintableDocumentContent.add(hr);
				
				Image companyLogo = new ImageIcon(companyLogoUrl).getImage();
				
				
				currentPrintableDocument.setPageContent(currentPrintableDocumentContent);
			}
			
			printableDocuments.add(currentPrintableDocument);
			this.documentInvoicePrinter.setPrintableDocuments(printableDocuments);
		}
	}

	public DocumentInvoice getDoc() {
		return doc;
	}

	public void setDoc(DocumentInvoice doc) {
		this.doc = doc;
	}

	public WebEngine getEngine() {
		return engine;
	}

	public void setEngine(WebEngine engine) {
		this.engine = engine;
	}

	public ArrayList<Printable> getPrintableDocuments() {
		return printableDocuments;
	}

	public void setPrintableDocuments(ArrayList<Printable> printableDocuments) {
		this.printableDocuments = printableDocuments;
	}

	public DocumentInvoicePrinter getDocumentInvoicePrinter() {
		return documentInvoicePrinter;
	}

	public void setDocumentInvoicePrinter(DocumentInvoicePrinter documentInvoicePrinter) {
		this.documentInvoicePrinter = documentInvoicePrinter;
	}
	
	
	
}
