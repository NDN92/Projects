package de.NDN.app.writeInvoice.document;

import java.awt.BasicStroke;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.Toolkit;
import java.awt.geom.Rectangle2D;
import java.awt.print.Printable;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import de.NDN.app.globalObjects.AppFont;
import de.NDN.app.globalObjects.Converter;
import de.NDN.app.globalObjects.CustomerType;
import de.NDN.app.writeInvoice.WriteInvoiceModel;
import de.NDN.app.writeInvoice.document.print.DocumentInvoicePrintable;
import de.NDN.app.writeInvoice.document.print.DocumentInvoicePrinter;
import javafx.scene.web.WebEngine;
import sun.font.Font2DHandle;

public class DocumentInvoiceFactory {
	
	//DIN-Norm for Address-Field
	private final double ADDRESS_FIELD_TOP = 142;
	private final double ADDRESS_FIELD_LEFT = 57;
	private final double ADDRESS_FIELD_WIDTH = 241;
	private final double ADDRESS_FIELD_HEIGHT = 113;
	
	private DocumentInvoice doc;
	private WebEngine engine;
	private ArrayList<Printable> printableDocuments;
	private DocumentInvoicePrinter documentInvoicePrinter;
	private WriteInvoiceModel writeInvoiceModel;
	
	private Converter conv = new Converter();
	
	public DocumentInvoiceFactory(WebEngine engine, WriteInvoiceModel writeInvoiceModel) {
		this.engine = engine;
		this.writeInvoiceModel = writeInvoiceModel;
	}
	
	public void createNewDocument(CustomerType customerType) {
		this.doc = new DocumentInvoice(customerType, new ArrayList<PageInvoice>());
		this.doc.getPages().add( new PageInvoice(this.doc, 1) );
	}
	
	public void showDocumentOnViewPage() {
		
		if(this.doc != null) {
			double pageDpiRatio = this.writeInvoiceModel.getPageDpiRatio();
			double[] printableArea = this.doc.getPages().get(0).getPrintableArea();
			
			double printableAreaTop = this.doc.getPages().get(0).getPrintableArea()[0];
			double printableAreaRight = this.doc.getPages().get(0).getPrintableArea()[1];
			double printableAreaBottom = this.doc.getPages().get(0).getPrintableArea()[2];
			double printableAreaLeft = this.doc.getPages().get(0).getPrintableArea()[3];			
			if(pageDpiRatio != 1) {
				printableAreaTop 	*= pageDpiRatio;
				printableAreaRight 	*= pageDpiRatio;
				printableAreaBottom *= pageDpiRatio;
				printableAreaLeft 	*= pageDpiRatio;
				printableArea = new double[] {printableAreaTop, printableAreaRight, printableAreaBottom, printableAreaLeft};
			}
			
			double printableAreaWidth = this.writeInvoiceModel.getPageWidth() - (printableAreaRight + printableAreaLeft);
			double printableAreaHeight = this.writeInvoiceModel.getPageHeight() - (printableAreaTop + printableAreaBottom);
			double[] pageSize = {this.writeInvoiceModel.getPageWidth(), this.writeInvoiceModel.getPageHeight()};
			
			AppFont ARIAL_STD = new AppFont("ARIAL_STD");
			AppFont ARIAL_BLD = new AppFont("ARIAL_BLD");
			AppFont ARIAL_IT  = new AppFont("ARIAL_IT");
						
			printableDocuments = new ArrayList<Printable>();
			DocumentInvoicePrintable currentPrintableDocument = new DocumentInvoicePrintable();			
			ArrayList<Object[]> currentPageShapes = new ArrayList<Object[]>(); //{Shape, Color}
			ArrayList<Object[]> currentPageImages = new ArrayList<Object[]>(); //{Image, imgWidth, imgHeight, imgX, imgY}
			ArrayList<Object[]> currentPageTexts = new ArrayList<Object[]>(); //{String, Font, Color, textX, textY}
			
			this.documentInvoicePrinter = new DocumentInvoicePrinter();
			
			if(this.doc.getCustomerType() == CustomerType.PRIVATE) {
				
				this.engine.executeScript("setPrintableArea(" +
						printableAreaTop + ", " +
						printableAreaRight + ", " +
						printableAreaBottom + ", " +
						printableAreaLeft + ");");
				this.documentInvoicePrinter.setPageSize(pageSize);
				this.documentInvoicePrinter.setPrintableArea(printableArea);
				this.documentInvoicePrinter.setPrintableAreaWidth(printableAreaWidth);
				this.documentInvoicePrinter.setPrintableAreaHeight(printableAreaHeight);
				
				
				//Company Header
				String companyLogoUrl = this.doc.getPages().get(0).getCompanyHeader().getCompanyLogoURL();
				String companyLogoUrlCSS = "../images" + companyLogoUrl.substring(companyLogoUrl.lastIndexOf("/"), companyLogoUrl.length());
				int logoWidth = -1;
				int logoHeight = this.doc.getPages().get(0).getCompanyHeader().getCompanyHeaderHeight() - 10;				
				int logoX = 0;
				int logoY = 0;
				double hrWidth = printableAreaWidth;
				int hrHeight = 1;				
				int hrX = 0;
				int hrY = this.doc.getPages().get(0).getCompanyHeader().getCompanyHeaderHeight() - hrHeight;				
				if(pageDpiRatio != 1) {
					//logoWidth = (int) Math.round(logoWidth * pageDpiRatio);
					logoHeight 	= (int) Math.round(logoHeight * pageDpiRatio);
					logoX		= (int) Math.round(logoX * pageDpiRatio);
					logoY 		= (int) Math.round(logoY * pageDpiRatio);
					
					hrHeight	= (int) Math.round(hrHeight * pageDpiRatio);
					hrX 		= (int) Math.round(hrX * pageDpiRatio);
					hrY 		= (int) Math.round(hrY * pageDpiRatio);
				}
				
				this.engine.executeScript("setCompanyHeader(" + 
						logoHeight + ", '" +
						companyLogoUrlCSS + "'," + 
						logoX + ", " +
						logoY + ", " +
						hrHeight + ", " +
						hrWidth + ", " +
						hrX + ", " +
						hrY + ");");
				
				Rectangle2D.Double hr = new Rectangle2D.Double();
				hr.setRect(hrX, hrY, hrWidth, hrHeight);
				currentPageShapes.add( new Object[] {hr, Color.BLACK} );
				try {
					Image companyLogo = Toolkit.getDefaultToolkit().getImage( URLDecoder.decode(companyLogoUrl.replace("file:/", ""), "UTF-8") );
					currentPageImages.add( new Object[] {companyLogo, logoWidth, logoHeight, logoX, logoY} );
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				}
				
				
								
				
				double afW = this.ADDRESS_FIELD_WIDTH;
				double afH = this.ADDRESS_FIELD_HEIGHT;
				double afX = this.ADDRESS_FIELD_LEFT - this.doc.getPages().get(0).getPrintableArea()[3];
				double afY = this.ADDRESS_FIELD_TOP - this.doc.getPages().get(0).getPrintableArea()[0];
				AppFont afFont = new AppFont(ARIAL_STD, 16, Color.BLACK);
				if(pageDpiRatio != 1) {
					afW *= pageDpiRatio;
					afH *= pageDpiRatio;
					afX *= pageDpiRatio;
					afY *= pageDpiRatio;
				}
				this.engine.executeScript("setAddressField(" +
						afW + ", " +
						afH + ", " +
						"'" + ARIAL_STD.getName() + "', " +
						afFont.getSize() + ", " +
						"'" + afFont.getColorInHex() + "', " +
						afX + ", " +
						afY + ");");
				
				
				//Company Address and Infos
				String t1_1 = this.doc.getPages().get(0).getCompanyHeader().getCompanyAddress().getCompanyName();
				String t1_2 = this.doc.getPages().get(0).getCompanyHeader().getCompanyAddress().getStreet() + " " + this.doc.getPages().get(0).getCompanyHeader().getCompanyAddress().getNumber();
				String t1_3 = this.doc.getPages().get(0).getCompanyHeader().getCompanyAddress().getZipcode() + " " + this.doc.getPages().get(0).getCompanyHeader().getCompanyAddress().getTown();
				String t1_4 = "";
				String t1_5 = "Tel. " + this.doc.getPages().get(0).getCompanyHeader().getPhoneNumber();
				String t1_6 = "Fax " + this.doc.getPages().get(0).getCompanyHeader().getFaxNumber();
				String t1_7 = "";
				String t1_8 = this.doc.getPages().get(0).getCompanyHeader().geteMail();
				String t1_9 = this.doc.getPages().get(0).getCompanyHeader().getWeb();
				Object[] multiLineObjects = this.conv.getJsExCodeForMultilineSetText(
						new String[] {t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7, t1_8, t1_9}, 
						new AppFont(ARIAL_STD, 8, Color.BLACK, 9),
						320, 
						//(int) Math.round(this.ADDRESS_FIELD_TOP - this.doc.getPages().get(0).getPrintableArea()[0]) + 1, 
						8,
						pageDpiRatio);
				for( int i = 0; i < ((String[]) multiLineObjects[0]).length; i++) {
					this.engine.executeScript( ((String[]) multiLineObjects[0])[i] );
					currentPageTexts.add( (Object[]) ((Object[]) multiLineObjects[1])[i] );
				}
				
				
				int textMargin1 = (int) Math.round(this.ADDRESS_FIELD_LEFT - this.doc.getPages().get(0).getPrintableArea()[3]);
				
				
				int ihRectWidth = (int) Math.round(printableAreaWidth);
				int ihRectHeight = -1;
				Color ihRectBgColor = Color.decode("#f9f9f9");
				BasicStroke ihRectBorder = new BasicStroke(1.0f);
				Color ihRectBorderColor = Color.decode("#e9e9e9");
				int ihRectX = 0;
				int ihRectY = 242;
				//
				String ihHeadline = "Rechnung";
				AppFont ihHeadlineFont = new AppFont(ARIAL_BLD, 14, Color.BLACK, 14);
				int ihHeadlineX = textMargin1;
				int ihHeadlineY = ihRectY + textMargin1;
				//
				int ihHeadlineLabelAndValuesSpace = 10;
				//
				String invoiceNumber = this.doc.getPages().get(0).getInvoiceHeader().getInvoiceNumber();
				Date invoiceDate = this.doc.getPages().get(0).getInvoiceHeader().getInvoiceDate();
				String customerNumber = this.doc.getPages().get(0).getInvoiceHeader().getCustomerNumber();
				Date payableDate = this.doc.getPages().get(0).getInvoiceHeader().getPayableDate();
				int weekNumber = -1;
				Object[] ihLabelsAndValues = {
						"Rechnungs-Nr:", invoiceNumber, 
						"Rechnungs-Datum:", new SimpleDateFormat("ddMMyyyy").format(invoiceDate), 
						"Kunden-Nr:", customerNumber, 
						"Fällig am:", new SimpleDateFormat("ddMMyyyy").format(payableDate), 
						"Leistung von KW", weekNumber
				};				
				AppFont ihLabelsAndValuesFont = new AppFont(ARIAL_STD, 10, Color.BLACK, 14);
				int ihLabelsAndValuesX1 = ihHeadlineX;
				int ihLabelsAndValuesX2 = (int) Math.round((ihRectWidth - (2 * ihLabelsAndValuesX1)) / 2.0);
				int ihLabelsAndValuesY = ihHeadlineY + ihHeadlineFont.getLineHeight();
				int ihLabelWidth = (int) Math.round(ihLabelsAndValuesX2 / 2.0);
				
				double p1 = (Math.round((ihLabelsAndValues.length / 2) / 2.0) * ihLabelsAndValuesFont.getLineHeight());
				double p2 = Math.round((ihLabelsAndValuesFont.getLineHeight() - ihLabelsAndValuesFont.getSize()) / 2.0);
				
				
				ihRectHeight = (int) Math.round( 
						  ihHeadlineX
						+ ihHeadlineFont.getLineHeight()
						+ ( Math.round( (ihLabelsAndValues.length / 2) / 2.0 ) * ihLabelsAndValuesFont.getLineHeight() )
						- Math.round( (ihLabelsAndValuesFont.getLineHeight() - ihLabelsAndValuesFont.getSize() ) / 2.0 )  //Wichtig, da der Text über die ganze lineHeight vertikal zentriert wird
						+ ihHeadlineX 
				);
				this.engine.executeScript("setRectangle(" +
						ihRectWidth + ", " +
						ihRectHeight + ", " +
						"'" + this.conv.convertJavaColorToCssColor(ihRectBgColor) + "', " +
						"'" + ihRectBorder.getLineWidth() + "px solid" + this.conv.convertJavaColorToCssColor(ihRectBorderColor) + "', " +
						ihRectX + ", " +
						ihRectY + ");"
				);				
				this.engine.executeScript("setText("
						+ "'" + ihHeadline + "', "
						+ "'" + ihHeadlineFont.getName() + "', "
						+ 	    ihHeadlineFont.getSize() + ", "
						+ "'" + ihHeadlineFont.getColorInHex() + "', "
						+ 	    ihHeadlineFont.getLineHeight() + ", "
						+ 	    ihHeadlineX + ", "
						+ 	    ihHeadlineY + ");"
				);				
				Object[] invoiceHeaderObj = this.conv.getJsExcodeForInvoiceHeader(
						ihLabelsAndValues, 
						ihLabelWidth, 
						ihLabelsAndValuesFont, 
						ihLabelsAndValuesX1, 
						ihLabelsAndValuesX2, 
						ihLabelsAndValuesY, 
						pageDpiRatio);
				for( int i = 0; i < ((String[]) invoiceHeaderObj[0]).length; i++) {
					this.engine.executeScript( ((String[]) invoiceHeaderObj[0])[i] );
					//currentPageTexts.add( (Object[]) ((Object[]) multiLineObjects[1])[i] );
				}
				
				
				
				currentPrintableDocument.setPageShapes(currentPageShapes);
				currentPrintableDocument.setPageImages(currentPageImages);
				currentPrintableDocument.setPageTexts(currentPageTexts);
			}
			
			printableDocuments.add(currentPrintableDocument);
			this.documentInvoicePrinter.setPrintableDocuments(printableDocuments);
		}
	}

	public DocumentInvoice getDoc() {
		return doc;
	}

	public void setDoc(DocumentInvoice doc) {
		this.doc = doc;
	}

	public WebEngine getEngine() {
		return engine;
	}

	public void setEngine(WebEngine engine) {
		this.engine = engine;
	}

	public ArrayList<Printable> getPrintableDocuments() {
		return printableDocuments;
	}

	public void setPrintableDocuments(ArrayList<Printable> printableDocuments) {
		this.printableDocuments = printableDocuments;
	}

	public DocumentInvoicePrinter getDocumentInvoicePrinter() {
		return documentInvoicePrinter;
	}

	public void setDocumentInvoicePrinter(DocumentInvoicePrinter documentInvoicePrinter) {
		this.documentInvoicePrinter = documentInvoicePrinter;
	}
	
	
	
}
